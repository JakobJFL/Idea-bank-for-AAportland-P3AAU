
@code {

  [Fact]
  public void Auth()
  {
    // Arrange
    var ctx = InitializeTestContext();

    // Act
    ctx.Services.GetService<Settings>().CommentsEnabled = false;
    var cut = ctx.Render(@<CommentSection/>);
    var submitSection = cut.Find("#submitComments");

    // Assert
    submitSection.MarkupMatches(@<div id="submitComments"></div>);
    }
    private TestContext InitializeTestContext()
    {
      var ctx = new TestContext();
      ctx.AddTestAuthorization();
      ctx.Services.AddScoped<IIdeaRepository, IdeaRepository>();
      ctx.Services.AddScoped<ICommentsRepository, CommentsRepository>();
      ctx.Services.AddScoped<IConfigurationRepository, ConfigurationRepository>();
      ctx.Services.AddScoped<IConfig, Config>();
      ctx.Services.AddScoped<IIdeasDataAccess, IdeasDataAccess>();
      ctx.Services.AddSingleton<Settings>();
      ctx.Services.AddScoped<ICommentsDataAccess, CommentsDataAccess>();
      ctx.Services.AddDbContext<Context>(options =>
      {
        options.UseSqlServer("Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=IdeaBank;Integrated Security=True;Connect Timeout=30;Encrypt=False;TrustServerCertificate=False;ApplicationIntent=ReadWrite;MultiSubnetFailover=False");
      });
      return ctx;
    }
}
